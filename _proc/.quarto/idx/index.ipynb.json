{"title":"BitLinear","markdown":{"yaml":{"output-file":"index.html","title":"BitLinear"},"headingText":"Install","containsRefs":false,"markdown":"\n\n\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\nI just did not come up with some better naming, lol.\n\nThis repository contains my experimental package where I:\n- Were inspired by [\"The Era of 1-bit LLMs: All Large Language Models are in 1.58 Bits\"](https://arxiv.org/abs/2402.17764) approach\n  - Essentially guys have proven that $log_2(3)$ bits of *informational capacity* per parameter is enought to pretrain a language model (they have shown that we can make a linear layer operating *factual* weights having only three values $(-scale, 0, scale)$).\n  - However since they used, well, fully-gradiental method to train LLM - in the reality weights were 16/32 bit, and were quantized to these values on the fly by some (approximately) differentiable quantization function\n  - By the way it also means that if model have $|W|$ trainable weights - optimizing through an optimizer like Adam will consume $3|W|dataTypeBytes$ parameters \n- On the other hand in [\"ReLoRA: High-Rank Training Through Low-Rank Updates\"](https://arxiv.org/abs/2307.05695) other researchers show that if we freeze the original model and do incremental procedure of \"train LoRA adapters - merge them into the original model - reset optimizer state\" - the quality becomes comparable with standart training approach\n  - So the gradient updates do not apply to the original model weights here, means we:\n    - Need only $3(|A|+|B|)dataTypeBytes + |W|dataTypeBytes$ bytes of memory used by the optimization process (where $|A|$ and $|B|$ is an summary amount of parameters in $LoraA$ / $LoraB$ accross the whole model)\n    - However the original model need to be stored in memory fully\n\nSo I made a custom linear layer which:\n- Do not store original weights for long - only save to file, quantize it and than store quantized weights inside itself (so each byte represents a group of 5 parameters)\n  - So $ W_quant = quantize(W) $\n- Do dequantization during a forward pass and adds adapter as well\n  - $ dequantize(W_quant) x + bias + LoRA(x) $\n- Can merge LoRA adapter inside itself\n  - To do so it:\n    - Load the file with a previously saved weights\n    - Merge LoRA's $\\delta W\\$ - $ W = W + \\delta_W $\n    - Save these new weights\n    - Quantize it $ W_quant = quantize(W) $\n  - Surely with such a procedure we *must* except some quality loss:\n    - At first - LoRA were trained to work upon quantized weights, which is a mere approximation of the original ones\n    - At second - LoRA-introduced update than becomes quantized again\n\nAnd ReLoRA training is basically the same as in the corresponding paper (except for the way we merge model and LoRA's).\n\nNow I am conducting experiments to see how well does the approach works.\n\n\n```sh\npip install bitlinear@git+https://github.com/alex4321/bitlinear.git\n```\n\n## How to use\n\nHere I will make a simple example upon which I am experimenting now (there is still some debugging)\n\n```python\nimport os\nimport datasets\nfrom transformers import AutoTokenizer, DataCollatorForLanguageModeling, TrainingArguments, Trainer, \\\n    TrainerCallback\nfrom transformers.models.mistral import MistralConfig\nfrom bitlinear.adapters import LoRAAdapter\nfrom bitlinear.models.mistral import BitMistralForCausalLM\nfrom bitlinear.relora import ReLoRAOptimizer, ReLoRASchedulerLambda\nfrom torch.optim import AdamW\nfrom torch.optim.lr_scheduler import LambdaLR\nimport subprocess\nimport torch\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nSTORE_DIR = \"StoredWeights\"\n\nos.makedirs(STORE_DIR, exist_ok=True)\n\nconfig = MistralConfig(\n    vocab_size=32000,\n    hidden_size=4160, # Original Mistral have 4090, this is closest multiplier for both 5 and 32\n    intermediate_size=14400, # Original Mistral have 14336, this is closest multiplier for both 5 and 32\n    num_hidden_layers=5, # Instead of 32 - to make model roughly 1-billion params\n    num_attention_heads=32,\n    num_key_value_heads=8,\n    hidden_act=\"silu\",\n    max_position_embeddings=32768,\n    initializer_range=0.02,\n    rms_norm_eps=1e-5,\n    use_cache=True,\n    rope_theta=10000.0,\n    sliding_window=4096,\n    attention_dropout=0.0,\n)\nmodel = BitMistralForCausalLM(\n    config=config,\n    fname_prefix=f\"{STORE_DIR}/bitmistal\"\n).to(\"cuda:0\")\n\nmodel.add_adapters(\n    LoRAAdapter,\n    {\n        \"lora_rank\": 128,\n    }\n)\n\noptimizer = ReLoRAOptimizer(\n    model.parameters(),\n    model.mergeable_layers(),\n    optimizer_cls=AdamW,\n    optimizer_params={},\n    reset_n_steps=500,\n    lr=1e-5,\n)\nlr_scheduler = LambdaLR(\n    optimizer,\n    ReLoRASchedulerLambda(\n        lr_lambda=lambda step: step / 1000 if step < 1000 else min(1.0 - (step - 50000) / 50000, 1e-5),\n        warmup_n_steps=100,\n        reset_n_steps=500,\n    )\n)\n\noptimizer = ReLoRAOptimizer(\n    model.parameters(),\n    model.mergeable_layers(),\n    optimizer_cls=AdamW,\n    optimizer_params={},\n    reset_n_steps=500,\n    lr=1e-5,\n)\nlr_scheduler = LambdaLR(\n    optimizer,\n    ReLoRASchedulerLambda(\n        lr_lambda=lambda step: step / 1000 if step < 1000 else min(1.0 - (step - 50000) / 50000, 1e-5),\n        warmup_n_steps=100,\n        reset_n_steps=500,\n    )\n)\n\ndef tokenize_function(examples):\n    return tokenizer(examples[\"text\"], truncation=True, max_length=1024)\n\n# Tokenize all parts of the dataset\ntokenized_datasets = dataset_text.map(tokenize_function, batched=True, remove_columns=[\"text\"])\ntokenized_datasets\n\ndata_collator = DataCollatorForLanguageModeling(tokenizer, \n                                                mlm=False,\n                                                pad_to_multiple_of=8)\n\nclass GpuMemoryLoggingCallback(TrainerCallback):\n    \"\"\"A custom callback for logging GPU memory usage.\"\"\"\n    \n    def on_log(self, args, state, control, logs=None, **kwargs):\n        # Check if CUDA is available to avoid errors on CPU-only environments\n        if torch.cuda.is_available():\n            # Assuming a single-GPU setup here; adjust for multi-GPU as needed\n            result = subprocess.run(['nvidia-smi', '--query-gpu=memory.used', '--format=csv,nounits,noheader'],\n                                    capture_output=True, text=True)\n            memory_usage = result.stdout.strip()\n            \n            # Convert memory usage to an integer (MB) and log it\n            logs['gpu_memory_usage_mb'] = int(memory_usage)\n        else:\n            logs['gpu_memory_usage_mb'] = 0  # Default to 0 if not using GPU\n\nmodel.train()\nmodel.gradient_checkpointing_enable()\ntraining_args = TrainingArguments(\n    output_dir=\"./mistral-2b-stored-model\",\n    per_device_train_batch_size=4,\n    gradient_accumulation_steps=4,\n    per_device_eval_batch_size=4,\n    eval_accumulation_steps=4,\n    logging_dir=\"./mistral-2b-tensorboard-bitwise\",\n    logging_steps=1,\n    save_strategy=\"steps\",\n    save_steps=2000,\n    evaluation_strategy=\"steps\",\n    eval_steps=2000,\n    fp16=True,\n    gradient_checkpointing=True,\n    report_to=\"tensorboard\",\n    max_steps=10000,\n    # No need to specify data collator here, it's passed to the Trainer constructor\n)\n\n# Initialize the Trainer with the data collator\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_datasets[\"train\"],  # Assuming these are ready; dynamically tokenized if not\n    eval_dataset=tokenized_datasets[\"validation\"],\n    data_collator=data_collator,\n    optimizers=(optimizer, lr_scheduler),\n    callbacks=[GpuMemoryLoggingCallback()],\n)\n\n# Train\ntrainer.train()\n```\n\nSo far it seems to have far more memory efficiency (9GB consumed in this method and ~29Gb consumed through a normal training).\n\nThe quality seemed comparable, but it was just a start of the training process, so no conclusions yet.\n\nBefore continuing the stuff I will have to debug\n\n```\n/usr/local/lib/python3.10/dist-packages/torch/serialization.py in _save(obj, zip_file, pickle_module, pickle_protocol, _disable_byteorder_record)\n    839     pickler = pickle_module.Pickler(data_buf, protocol=pickle_protocol)\n    840     pickler.persistent_id = persistent_id\n--> 841     pickler.dump(obj)\n    842     data_value = data_buf.getvalue()\n    843     zip_file.write_record('data.pkl', data_value, len(data_value))\n\nAttributeError: Can't pickle local object 'ReLoRASchedulerLambda._wrap_lr_lambda.<locals>._func'\n```\n","srcMarkdownNoYaml":"\n\n\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\nI just did not come up with some better naming, lol.\n\nThis repository contains my experimental package where I:\n- Were inspired by [\"The Era of 1-bit LLMs: All Large Language Models are in 1.58 Bits\"](https://arxiv.org/abs/2402.17764) approach\n  - Essentially guys have proven that $log_2(3)$ bits of *informational capacity* per parameter is enought to pretrain a language model (they have shown that we can make a linear layer operating *factual* weights having only three values $(-scale, 0, scale)$).\n  - However since they used, well, fully-gradiental method to train LLM - in the reality weights were 16/32 bit, and were quantized to these values on the fly by some (approximately) differentiable quantization function\n  - By the way it also means that if model have $|W|$ trainable weights - optimizing through an optimizer like Adam will consume $3|W|dataTypeBytes$ parameters \n- On the other hand in [\"ReLoRA: High-Rank Training Through Low-Rank Updates\"](https://arxiv.org/abs/2307.05695) other researchers show that if we freeze the original model and do incremental procedure of \"train LoRA adapters - merge them into the original model - reset optimizer state\" - the quality becomes comparable with standart training approach\n  - So the gradient updates do not apply to the original model weights here, means we:\n    - Need only $3(|A|+|B|)dataTypeBytes + |W|dataTypeBytes$ bytes of memory used by the optimization process (where $|A|$ and $|B|$ is an summary amount of parameters in $LoraA$ / $LoraB$ accross the whole model)\n    - However the original model need to be stored in memory fully\n\nSo I made a custom linear layer which:\n- Do not store original weights for long - only save to file, quantize it and than store quantized weights inside itself (so each byte represents a group of 5 parameters)\n  - So $ W_quant = quantize(W) $\n- Do dequantization during a forward pass and adds adapter as well\n  - $ dequantize(W_quant) x + bias + LoRA(x) $\n- Can merge LoRA adapter inside itself\n  - To do so it:\n    - Load the file with a previously saved weights\n    - Merge LoRA's $\\delta W\\$ - $ W = W + \\delta_W $\n    - Save these new weights\n    - Quantize it $ W_quant = quantize(W) $\n  - Surely with such a procedure we *must* except some quality loss:\n    - At first - LoRA were trained to work upon quantized weights, which is a mere approximation of the original ones\n    - At second - LoRA-introduced update than becomes quantized again\n\nAnd ReLoRA training is basically the same as in the corresponding paper (except for the way we merge model and LoRA's).\n\nNow I am conducting experiments to see how well does the approach works.\n\n## Install\n\n```sh\npip install bitlinear@git+https://github.com/alex4321/bitlinear.git\n```\n\n## How to use\n\nHere I will make a simple example upon which I am experimenting now (there is still some debugging)\n\n```python\nimport os\nimport datasets\nfrom transformers import AutoTokenizer, DataCollatorForLanguageModeling, TrainingArguments, Trainer, \\\n    TrainerCallback\nfrom transformers.models.mistral import MistralConfig\nfrom bitlinear.adapters import LoRAAdapter\nfrom bitlinear.models.mistral import BitMistralForCausalLM\nfrom bitlinear.relora import ReLoRAOptimizer, ReLoRASchedulerLambda\nfrom torch.optim import AdamW\nfrom torch.optim.lr_scheduler import LambdaLR\nimport subprocess\nimport torch\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nSTORE_DIR = \"StoredWeights\"\n\nos.makedirs(STORE_DIR, exist_ok=True)\n\nconfig = MistralConfig(\n    vocab_size=32000,\n    hidden_size=4160, # Original Mistral have 4090, this is closest multiplier for both 5 and 32\n    intermediate_size=14400, # Original Mistral have 14336, this is closest multiplier for both 5 and 32\n    num_hidden_layers=5, # Instead of 32 - to make model roughly 1-billion params\n    num_attention_heads=32,\n    num_key_value_heads=8,\n    hidden_act=\"silu\",\n    max_position_embeddings=32768,\n    initializer_range=0.02,\n    rms_norm_eps=1e-5,\n    use_cache=True,\n    rope_theta=10000.0,\n    sliding_window=4096,\n    attention_dropout=0.0,\n)\nmodel = BitMistralForCausalLM(\n    config=config,\n    fname_prefix=f\"{STORE_DIR}/bitmistal\"\n).to(\"cuda:0\")\n\nmodel.add_adapters(\n    LoRAAdapter,\n    {\n        \"lora_rank\": 128,\n    }\n)\n\noptimizer = ReLoRAOptimizer(\n    model.parameters(),\n    model.mergeable_layers(),\n    optimizer_cls=AdamW,\n    optimizer_params={},\n    reset_n_steps=500,\n    lr=1e-5,\n)\nlr_scheduler = LambdaLR(\n    optimizer,\n    ReLoRASchedulerLambda(\n        lr_lambda=lambda step: step / 1000 if step < 1000 else min(1.0 - (step - 50000) / 50000, 1e-5),\n        warmup_n_steps=100,\n        reset_n_steps=500,\n    )\n)\n\noptimizer = ReLoRAOptimizer(\n    model.parameters(),\n    model.mergeable_layers(),\n    optimizer_cls=AdamW,\n    optimizer_params={},\n    reset_n_steps=500,\n    lr=1e-5,\n)\nlr_scheduler = LambdaLR(\n    optimizer,\n    ReLoRASchedulerLambda(\n        lr_lambda=lambda step: step / 1000 if step < 1000 else min(1.0 - (step - 50000) / 50000, 1e-5),\n        warmup_n_steps=100,\n        reset_n_steps=500,\n    )\n)\n\ndef tokenize_function(examples):\n    return tokenizer(examples[\"text\"], truncation=True, max_length=1024)\n\n# Tokenize all parts of the dataset\ntokenized_datasets = dataset_text.map(tokenize_function, batched=True, remove_columns=[\"text\"])\ntokenized_datasets\n\ndata_collator = DataCollatorForLanguageModeling(tokenizer, \n                                                mlm=False,\n                                                pad_to_multiple_of=8)\n\nclass GpuMemoryLoggingCallback(TrainerCallback):\n    \"\"\"A custom callback for logging GPU memory usage.\"\"\"\n    \n    def on_log(self, args, state, control, logs=None, **kwargs):\n        # Check if CUDA is available to avoid errors on CPU-only environments\n        if torch.cuda.is_available():\n            # Assuming a single-GPU setup here; adjust for multi-GPU as needed\n            result = subprocess.run(['nvidia-smi', '--query-gpu=memory.used', '--format=csv,nounits,noheader'],\n                                    capture_output=True, text=True)\n            memory_usage = result.stdout.strip()\n            \n            # Convert memory usage to an integer (MB) and log it\n            logs['gpu_memory_usage_mb'] = int(memory_usage)\n        else:\n            logs['gpu_memory_usage_mb'] = 0  # Default to 0 if not using GPU\n\nmodel.train()\nmodel.gradient_checkpointing_enable()\ntraining_args = TrainingArguments(\n    output_dir=\"./mistral-2b-stored-model\",\n    per_device_train_batch_size=4,\n    gradient_accumulation_steps=4,\n    per_device_eval_batch_size=4,\n    eval_accumulation_steps=4,\n    logging_dir=\"./mistral-2b-tensorboard-bitwise\",\n    logging_steps=1,\n    save_strategy=\"steps\",\n    save_steps=2000,\n    evaluation_strategy=\"steps\",\n    eval_steps=2000,\n    fp16=True,\n    gradient_checkpointing=True,\n    report_to=\"tensorboard\",\n    max_steps=10000,\n    # No need to specify data collator here, it's passed to the Trainer constructor\n)\n\n# Initialize the Trainer with the data collator\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_datasets[\"train\"],  # Assuming these are ready; dynamically tokenized if not\n    eval_dataset=tokenized_datasets[\"validation\"],\n    data_collator=data_collator,\n    optimizers=(optimizer, lr_scheduler),\n    callbacks=[GpuMemoryLoggingCallback()],\n)\n\n# Train\ntrainer.train()\n```\n\nSo far it seems to have far more memory efficiency (9GB consumed in this method and ~29Gb consumed through a normal training).\n\nThe quality seemed comparable, but it was just a start of the training process, so no conclusions yet.\n\nBefore continuing the stuff I will have to debug\n\n```\n/usr/local/lib/python3.10/dist-packages/torch/serialization.py in _save(obj, zip_file, pickle_module, pickle_protocol, _disable_byteorder_record)\n    839     pickler = pickle_module.Pickler(data_buf, protocol=pickle_protocol)\n    840     pickler.persistent_id = persistent_id\n--> 841     pickler.dump(obj)\n    842     data_value = data_buf.getvalue()\n    843     zip_file.write_record('data.pkl', data_value, len(data_value))\n\nAttributeError: Can't pickle local object 'ReLoRASchedulerLambda._wrap_lr_lambda.<locals>._func'\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","theme":"cosmo","title":"BitLinear"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}